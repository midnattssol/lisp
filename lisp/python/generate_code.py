#!/usr/bin/env python3.10
"""Generate some code."""
import dataclasses as dc
import pathlib as p
import typing as t

import cson

BASEPATH = p.Path(__file__).parent
with open(BASEPATH.parent / "data" / "builtins.cson", "r", encoding="utf-8") as file:
    content = file.read()

SIGNATURES = cson.loads(content)
SIGNATURES = dict(sorted(SIGNATURES.items(), key=lambda x: (len(x[0]), x[0])))
HEADER = f"/* This code was automatically generated by `{p.Path(__file__).name}`. */\n"


def key(x):
    return len(x), x


def _builtin2enum(builtin):
    return "B_" + builtin.upper()


def write2file(filename, code):
    """Write to a file."""
    with open(BASEPATH.parent / "cpp" / filename, "w", encoding="utf-8") as file:
        file.write(code)


@dc.dataclass
class CodeGenerator:
    dependencies: t.List[str]
    code: str
    filename: str

    def generate_and_write(self):
        code = HEADER
        for dependency in self.dependencies:
            code += f"#include {dependency}\n"
        code += self.code

        with open(
            BASEPATH.parent / "cpp" / self.filename, "w", encoding="utf-8"
        ) as file:
            file.write(code)


def get_builtins():
    """Get builtins."""
    gen = CodeGenerator(
        ["<map>", "<string>", "<set>"],
        "enum LispBuiltin {"
        + ",".join(map(_builtin2enum, SIGNATURES))
        + "};\n"
        + "const std::map<LispBuiltin, std::string> BUILTINS_NAMES = {"
        + ",".join(
            "{" + _builtin2enum(builtin) + ', "' + builtin + '"}'
            for builtin in SIGNATURES
        )
        + "};\n"
        + "const std::map<std::string, LispBuiltin> BUILTINS_NUMS = {"
        + ",".join(
            '{"' + builtin + '", ' + _builtin2enum(builtin) + "}"
            for builtin in SIGNATURES
        )
        + "};\n"
        + "const std::set<std::string> LISP_BUILTINS = {"
        + ",".join(f'"{builtin}"' for builtin in SIGNATURES)
        + "};\n",
        "gen_builtins.h",
    )

    return gen


def get_code():
    """Get the code."""
    code = (
        "std::map<std::string, LispVar *> BUILTINS_TYPES = {};\n"
        "bool BUILTINS_TYPES_READY = false;\n"
        "void _fill_out_lisp_builtin_types() {\n"
    )
    code += (
        "*_SINGLETON_NOTHING = {NOTHING, 0};\n"
        "*_SINGLETON_NOT_SET = {__NOT_SET__, 0};\n"
        "*_SINGLETON_NOARGS_TOKEN = {__NO_ARGS__, 0};\n"
    )

    # Only create signature objects once.
    signatures = {i[0] for i in SIGNATURES.values()}
    signatures = sorted(signatures, key=len)

    for i in range(len(signatures)):
        code += f"auto type_{i} = new LispVar;\n"

    for i, signature in enumerate(signatures):
        signature = signature.replace('"', '\\"')
        code += f'*type_{i} = parse_and_evaluate("{signature}");\n'

    for builtin, (signature, *_) in SIGNATURES.items():
        code += f'BUILTINS_TYPES["{builtin}"] = type_{signatures.index(signature)};\n'

    code += "BUILTINS_TYPES_READY = true;\n}\n"
    gen = CodeGenerator(["<map>", '"./lispvar.h"'], code, "gen.h")
    return gen


def main():
    """Write the code."""
    get_code().generate_and_write()
    get_builtins().generate_and_write()


if __name__ == "__main__":
    main()
