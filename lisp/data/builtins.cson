mul : ['[(map type [\"*\" \"numeric\"])]' , "num"]
rand : ['[(map type [\"int\"])]' , "list"]
add : ['[(map type [\"*\" \"numeric\"])]' , "num"]
or : ['[(map type [\"*\" \"numeric\"])]' , "num"]
and : ['[(map type [\"*\" \"numeric\"])]' , "num"]
xor : ['[(map type [\"*\" \"numeric\"])]' , "num"]
gt : ['[(map type [\"*\" \"numeric\"])]' , "bool"]
geq : ['[(map type [\"*\" \"numeric\"])]' , "bool"]
lt : ['[(map type [\"*\" \"numeric\"])]' , "bool"]
leq : ['[(map type [\"*\" \"numeric\"])]' , "bool"]
noop : ['[(map type [\"*\"])]' , "nothing"]
list : ['[(map type [\"*\"])]' , "list"]
eq : ['[(map type [\"*\"])]' , "bool"]
neq : ['[(map type [\"*\"])]' , "bool"]
typeof : ['[(map type [\"any\"])]' , "type"]
symbol : ['[(map type [\"any\"])]' , "any"]
repr : ['[(map type [\"any\"])]' , "string"]
put : ['[(map type [\"any\"])]' , "nothing"]
help : ['[(map type [\"any\"])]' , "string"]
len : ['[(map type [\"list\"])]' , "int"]
eval : ['[(map type [\"list\"])]' , "any"]
eval_expr : ['[(map type [\"expression\"])]' , "any"]
type : ['[(map type [\"string\"])]' , "type"]
join : ['[(map type [\"*\" \"list\"])]' , "list"]
neg : ['[(map type [\"numeric\"])]' , "num"]
flip : ['[(map type [\"int\"])]' , "int"]
mod : ['[(map type [\"int\"]) (map type [\"int\"])]' , "int"]
sub : ['[(map type [\"numeric\"]) (map type [\"numeric\"])]' , "num"]
div : ['[(map type [\"numeric\"]) (map type [\"numeric\"])]' , "num"]
range : ['[(map type [\"int\" \"?\"]) (map type [\"int\" \"?\"]) (map type [\"int\" \"?\" \"truthy\"])]' , "list"]
insert : ['[(map type [\"any\"]) (map type [\"int\"]) (map type [\"list\"])]' , "list"]
assert : ['[(map type [\"booly\"]) (map type [\"string\" \"?\"])]' , "nothing"]
bool : ['[(map type [\"booly\"])]' , "bool"]
slice : ['[(map type [\"list\"]) (map type [\"int\"]) (map type [\"int\" \"?\"]) (map type [\"int\" \"?\"])]' , "list"]
repeat : ['[(map type [\"int\"]) (map type [\"any\"])]' , "list"]
get : ['[(map type [\"int\"]) (map type [\"list\"])]' , "any"]
typematch : ['[(map type [\"list\"]) (map type [\"list\"])]' , "bool"]
map : ['[(map type [\"callable\"]) (map type [\"list\" \"*\"])]' , "list"]
fold : ['[(map type [\"callable\"]) (map type [\"?\"]) (map type [\"list\"])]' , "any"]
ternary : ['[(map type [\"booly\"]) (map type [\"any\"]) (map type [\"any\"])]' , "any"]
let : ['[(map type [\"string\"]) (map type [\"any\"])]' , "any"]
call : ['[(map type [\"callable\"]) (map type [\"any\" \"*\"])]' , "any"]
closure : ['[(map type [\"expression\"])]' , "closure"]
match : ['[(map type [\"string\"]) (map type [\"string\"])]' , "bool"]
do: ['[(map type [\"+\"])]', "any"]
while: ['[(map type [\"expression\"]) (map type [\"expression\"])]', "nothing"]
exit: ['[(map type [\"int\"])]', "nothing"]
expression: ['[(map type [\"*\"])]', "expression"]
push : ['[(map type [\"list\"]) (map type [\"any\"])]' , "nothing"]
pop : ['[(map type [\"list\"])]' , "any"]
