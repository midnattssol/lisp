/* This code was automatically generated by `generate_code.py`. */
#include <map>
#include <string>
enum LispBuiltin {B_DO,B_EQ,B_GT,B_LT,B_OR,B_ADD,B_AND,B_DIV,B_GEQ,B_GET,B_LEN,B_LEQ,B_LET,B_MAP,B_MOD,B_MUL,B_NEG,B_NEQ,B_POP,B_PUT,B_SUB,B_XOR,B_BOOL,B_CALL,B_EVAL,B_EXIT,B_FLIP,B_FOLD,B_HELP,B_JOIN,B_LIST,B_NOOP,B_PUSH,B_RAND,B_REPR,B_TYPE,B_MATCH,B_RANGE,B_SLICE,B_WHILE,B_ASSERT,B_INSERT,B_REPEAT,B_SYMBOL,B_TYPEOF,B_CLOSURE,B_TERNARY,B_EVAL_EXPR,B_TYPEMATCH,B_EXPRESSION};
const std::map<LispBuiltin, std::string> BUILTINS_NAMES = {{B_DO, "do"},{B_EQ, "eq"},{B_GT, "gt"},{B_LT, "lt"},{B_OR, "or"},{B_ADD, "add"},{B_AND, "and"},{B_DIV, "div"},{B_GEQ, "geq"},{B_GET, "get"},{B_LEN, "len"},{B_LEQ, "leq"},{B_LET, "let"},{B_MAP, "map"},{B_MOD, "mod"},{B_MUL, "mul"},{B_NEG, "neg"},{B_NEQ, "neq"},{B_POP, "pop"},{B_PUT, "put"},{B_SUB, "sub"},{B_XOR, "xor"},{B_BOOL, "bool"},{B_CALL, "call"},{B_EVAL, "eval"},{B_EXIT, "exit"},{B_FLIP, "flip"},{B_FOLD, "fold"},{B_HELP, "help"},{B_JOIN, "join"},{B_LIST, "list"},{B_NOOP, "noop"},{B_PUSH, "push"},{B_RAND, "rand"},{B_REPR, "repr"},{B_TYPE, "type"},{B_MATCH, "match"},{B_RANGE, "range"},{B_SLICE, "slice"},{B_WHILE, "while"},{B_ASSERT, "assert"},{B_INSERT, "insert"},{B_REPEAT, "repeat"},{B_SYMBOL, "symbol"},{B_TYPEOF, "typeof"},{B_CLOSURE, "closure"},{B_TERNARY, "ternary"},{B_EVAL_EXPR, "eval_expr"},{B_TYPEMATCH, "typematch"},{B_EXPRESSION, "expression"}};
const std::map<std::string, LispBuiltin> BUILTINS_NUMS = {{"do", B_DO},{"eq", B_EQ},{"gt", B_GT},{"lt", B_LT},{"or", B_OR},{"add", B_ADD},{"and", B_AND},{"div", B_DIV},{"geq", B_GEQ},{"get", B_GET},{"len", B_LEN},{"leq", B_LEQ},{"let", B_LET},{"map", B_MAP},{"mod", B_MOD},{"mul", B_MUL},{"neg", B_NEG},{"neq", B_NEQ},{"pop", B_POP},{"put", B_PUT},{"sub", B_SUB},{"xor", B_XOR},{"bool", B_BOOL},{"call", B_CALL},{"eval", B_EVAL},{"exit", B_EXIT},{"flip", B_FLIP},{"fold", B_FOLD},{"help", B_HELP},{"join", B_JOIN},{"list", B_LIST},{"noop", B_NOOP},{"push", B_PUSH},{"rand", B_RAND},{"repr", B_REPR},{"type", B_TYPE},{"match", B_MATCH},{"range", B_RANGE},{"slice", B_SLICE},{"while", B_WHILE},{"assert", B_ASSERT},{"insert", B_INSERT},{"repeat", B_REPEAT},{"symbol", B_SYMBOL},{"typeof", B_TYPEOF},{"closure", B_CLOSURE},{"ternary", B_TERNARY},{"eval_expr", B_EVAL_EXPR},{"typematch", B_TYPEMATCH},{"expression", B_EXPRESSION}};
const std::set<std::string> LISP_BUILTINS = {"do","eq","gt","lt","or","add","and","div","geq","get","len","leq","let","map","mod","mul","neg","neq","pop","put","sub","xor","bool","call","eval","exit","flip","fold","help","join","list","noop","push","rand","repr","type","match","range","slice","while","assert","insert","repeat","symbol","typeof","closure","ternary","eval_expr","typematch","expression"};
