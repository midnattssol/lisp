apply: [
    '[(map type [\"callable\"]) (map type [\"vector\"])]'
    'vector'
    'Call a function using $2 as the arguments.'
    '(apply + [1 2 3]) ; 6'
]
split: [
    '[(map type [\"string\"]) (map type [\"string\"])]'
    'vector'
    'Split a string by a regular expression.'
    '(split "\\s" "Hello world!") ; ["Hello" "world!"] '
]
findall: [
    '[(map type [\"string\"]) (map type [\"string\"])]'
    'vector'
    'Find all matches of a regular expression.'
    '(findall "\\d+" "a is 20 and b is 19") ; ["20" "19"] '
]
input: [
    '[]'
    'string'
    'Get user input from stdin.'
]
parse: [
    '[(map type [\"string\"])]'
    'any'
    'Parse and evaluate a simple expression in string form.'
    '(parse "10") ; 10'
]
ord: [
    '[(map type [\"string\"])]'
    'num'
    'Get the ASCII index for a character.'
    '(ord "a") ; 97'
]
chr: [
    '[(map type [\"int\"])]'
    'string'
    'Get the ASCII character at this index.'
    '(chr 97) ; "a"'
]
break: [
    '[]'
    'nil'
    'Break out of a loop.'
]
not: [
    '[(map type [\"any\"])]'
    'bool'
    'Return `No` if the argument is truthy and `Yes` otherwise.'
]
return: [
    '[(map type [\"any\"])]'
    'any'
    'Return the argument from the function.'
]
mul: [
    '[(map type [\"*\" \"numeric\"])]'
    'numeric'
    'Multiply all arguments together, defaulting to 1.'
    '(* 1 2 3 4) ; 24'
]
rand: [
    '[(map type [\"int\"])]'
    'vector'
    'Get a vector of random integers of length equal to the argument. The numbers are generated using the MT19937 implementation of the Mersenne Twister.'
    '(rand 5)'
]
add: [
    '[(map type [\"*\" \"numeric\"])]'
    'numeric'
    'Add all arguments together, defaulting to 0.'
    '(+ 1 2 3 4) ; 10'
]
or: [
    '[(map type [\"*\" \"numeric\"])]'
    'numeric'
    'Return the bitwise `or` of all arguments, defaulting to 0.'
]
and: [
    '[(map type [\"*\" \"numeric\"])]'
    'numeric'
    'Return the bitwise `and` of all arguments, defaulting to `(flip 0)`.'
]
find: [
    '[(map type ["any"]) (map type ["vector"])]'
    'int'
    'Return the first index at which $0 occurs in $1, or Nothing if it can\'t be found.'
]
xor: [
    '[(map type [\"*\" \"numeric\"])]'
    'numeric'
    'Return the bitwise `xor` of all arguments, defaulting to 0.'
]
gt: [
    '[(map type [\"*\" \"numeric\"])]'
    'bool'
    'Return `True` if all arguments are ordered in strictly decreasing order, or `False` otherwise.'
]
geq: [
    '[(map type [\"*\" \"numeric\"])]'
    'bool'
    'Return `True` if all arguments are ordered in non-strictly decreasing order, or `False` otherwise.'
]
lt: [
    '[(map type [\"*\" \"numeric\"])]'
    'bool'
    'Return `True` if all arguments are ordered in strictly increasing order, or `False` otherwise.'
]
leq: [
    '[(map type [\"*\" \"numeric\"])]'
    'bool'
    'Return `True` if all arguments are ordered in non-strictly increasing order, or `False` otherwise.'
]
vector: [
    '[(map type [\"*\"])]'
    'vector'
    'Construct a vector containing the arguments.'
]
list: [
    '[(map type [\"*\"])]'
    'list'
    'Construct a linked list containing the arguments.'
]
eq: [
    '[(map type [\"*\"])]'
    'bool'
    'Return `True` if all elements are equal, or `False` otherwise.'
]
neq: [
    '[(map type [\"*\"])]'
    'bool'
    'Return `True` if all elements are different, or `False` otherwise.'
]
typeof: [
    '[(map type [\"any\"])]'
    'type'
    'Get a type object describing the type of the argument.'
]
repr: [
    '[(map type [\"any\"])]'
    'string'
    'Get a string representation of the argument.'
]
put: [
    '[(map type [\"*\"])]'
    'nil'
    'Print the arguments to `stdout`.'
]
help: [
    '[(map type [\"any\"])]'
    'string'
    'Get a help string about the argument.'
]
len: [
    '[(map type [\"iterable\"])]'
    'int'
    'Get the number of elements in the iterable.'
]
eval_expr: [
    '[(map type [\"expression\"])]'
    'any'
    'Evaluate an expression.'
]
type: [
    '[(map type [\"string\"])]'
    'type'
    'Construct a type object from a typename.'
]
join: [
    '[(map type [\"*\" \"iterable\"])]'
    'iterable'
    'Join any number of iterables together.'
]
neg: [
    '[(map type [\"numeric\"])]'
    'numeric'
    'Return a negative version of the number.'
]
flip: [
    '[(map type [\"int\"])]'
    'int'
    'Flip all the bits in the number.'
]
mod: [
    '[(map type [\"int\"]) (map type [\"int\"])]'
    'int'
    'Return $0 modulo $1.'
]
sub: [
    '[(map type [\"numeric\"]) (map type [\"numeric\"])]'
    'numeric'
    'Subtract $1 from $0.'
]
div: [
    '[(map type [\"numeric\"]) (map type [\"numeric\"])]'
    'numeric'
    'Divide $0 by $1.'
]
range: [
    '[(map type [\"int\" \"?\"]) (map type [\"int\" \"?\"]) (map type [\"int\" \"?\" \"truthy\"])]'
    'vector'
    'Return every $2 numbers from $0 to $1.'
]
insert: [
    '[(map type [\"any\"]) (map type [\"int\"]) (map type [\"iterable\"])]'
    'vector'
    'Return a copy of $2 with $0 inserted at the index $1.'
]
linsert: [
    '[(map type [\"any\"]) (map type [\"int\"]) (map type [\"iterable\"])]'
    'list'
    'Return a copy of $2 with $0 inserted at the index $1.'
]
assert: [
    '[(map type [\"booly\"]) (map type [\"string\" \"?\"])]'
    'nil'
    'Check if the argument is truthy, showing an optional error message before quitting.'
]
bool: [
    '[(map type [\"booly\"])]'
    'bool'
    'Cast the input to a boolean.'
]
slice: [
    '[(map type [\"iterable\"]) (map type [\"int\"]) (map type [\"int\" \"?\"]) (map type [\"int\" \"?\"])]'
    'iterable'
    'Return the elements between $1 and $2 inclusive in the iterable, with a step size equal to the $3.'
]
repeat: [
    '[(map type [\"int\"]) (map type [\"any\"])]'
    'vector'
    'Return a vector of length equal to $0 by repeating $1.'
]
get: [
    '[(map type [\"int\"]) (map type [\"indexable\"])]'
    'any'
    'Get the item in $1 with index equal to $0.'
]
typematch: [
    '[(map type [\"vector\"]) (map type [\"vector\"])]'
    'bool'
    'Return whether or not the type of $1 matches $0 as a type descriptor.'
]
map: [
    '[(map type [\"callable\"]) (map type [\"vector\" \"*\"])]'
    'vector'
    'Return a new vector with the callable applied to each element in the original vector.'
]
accumulate: [
    '[(map type [\"callable\"]) (map type [\"vector\"]) (map type [\"?\"])]'
    'vector'
    'Accumulate the vector using a callable and an optional accumulator.'
]
fold: [
    '[(map type [\"callable\"]) (map type [\"vector\"]) (map type [\"?\"])]'
    'any'
    'Fold a vector together using a callable and an optional accumulator.'
    '(fold + [10 20 30 40]) ; Equivalent to (+ 40 (+ 30 (+ 10 20)))'
]
ternary: [
    '[(map type [\"booly\"]) (map type [\"any\"]) (map type [\"any\"])]'
    'any'
    'Return $1 if $0 is truthy, otherwise $2.'
]
let: [
    '[(map type [\"string\"]) (map type [\"any\"])]'
    'any'
    'Bind $1 to the variable name $0.'
]
call: [
    '[(map type [\"callable\"]) (map type [\"any\" \"*\"])]'
    'any'
    'Call $0 on some arguments.'
]
closure: [
    '[(map type [\"expression\"])]'
    'closure'
    'Construct a closure from an expression containing an argument vector and an expression to evaluate.'
]
match: [
    '[(map type [\"string\"]) (map type [\"string\"])]'
    'bool'
    'Return whether or not the regular expression $0 fully matches the string $1.'
]
do: [
    '[(map type [\"*\"])]'
    'any'
    'Return the last of its arguments, or `Nil` if none are given.'
]
while: [
    '[(map type [\"expression\"]) (map type [\"expression\"])]'
    'nil'
    'As long as the result of evaluating $0 is `True`, $1 is evaluated.'
]
exit: [
    '[(map type [\"int\" "?"])]'
    'nil'
    'Exit the program with $0 as the error code, defaulting to 0.'
]
expression: [
    '[(map type [\"*\"])]'
    'expression'
    'Construct an expression from the arguments.'
]
push: [
    '[(map type [\"vector\"]) (map type [\"any\"])]'
    'nil'
    'Push $1 at the end of $0 in-place.'
]
pop: [
    '[(map type [\"vector\"])]'
    'any'
    'Pop the last element of $0 in-place.'
]
copy: [
    '[(map type [\"any\"])]'
    'any'
    'Return a copy of $0.'
]
int: [
    '[(map type [\"numeric\"])]'
    'int'
    'Cast the argument to an integer.'
]
float: [
    '[(map type [\"numeric\"])]'
    'float'
    'Cast the argument to a float.'
]
seed: [
    '[(map type [\"int\"])]'
    'nil'
    'Seed the Mersenne Twister used by `rand`.'
]
